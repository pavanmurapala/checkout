{"version":3,"sources":["Home.js","receipt.js","App.js","serviceWorker.js","index.js"],"names":["Home","window","Checkout","fectchSessionInfo","configureCheckout","useState","session","setSession","itemIndex","setitemIndex","byNow","e","index","a","preventDefault","data","className","Container","Row","Col","result","xs","sm","md","src","Form","FormGroup","row","Label","for","style","margin","Input","type","value","onClick","id","queryString","require","Receipt","props","showReciept","res","state","status","params","parse","location","search","resultIndicator","successIndicator","this","setState","response","React","Component","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef044267.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Row, Col, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Home = () => {\r\n\r\n    let { Checkout } = window;\r\n    let { fectchSessionInfo, configureCheckout } = window;\r\n    let [session, setSession] = useState('');\r\n    let [itemIndex, setitemIndex] = useState('');\r\n\r\n    const gotoLightBox = () => { configureCheckout(session.session.id, \"lightBox\") }\r\n    const showPaymentPage = () => { configureCheckout(session.session.id, \"\") }\r\n    const byNow = async (e, index) => {\r\n        e.preventDefault();\r\n\r\n        session = await fectchSessionInfo();\r\n        setSession(session.data);\r\n        setitemIndex(index);\r\n        window.session = session;\r\n    }\r\n\r\n    return <div className=\"App\">\r\n\r\n        <header className=\"App-header\">\r\n            <Container>\r\n                <Row><Col><p className=\"checkout\" >Store</p></Col></Row>\r\n                {session.result === \"SUCCESS\" ?\r\n\r\n                    <Row>\r\n                        <Col xs=\"3\" sm=\"3\" md=\"3\">\r\n                            {itemIndex ? <img className={\"shirtImg\"} src={`https://react-shooping-cart.netlify.app/img/${itemIndex}.jpg?v=1`} /> : \"\"}\r\n                        </Col>\r\n                        <Col xs=\"6\" sm=\"6\" md=\"6\" className=\"billingForm\">\r\n                            <Form><h2>Billing Information</h2>\r\n                                <FormGroup row>\r\n                                    <Label for=\"exampleEmail\" sm={4}>Amount</Label>\r\n                                    <Col sm={8}>\r\n                                        <b >120 $</b>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Label for=\"exampleEmail\" sm={4}>Description</Label>\r\n                                    <Col sm={8}>\r\n                                        <b >Ordered goods</b>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Form>\r\n\r\n                        </Col>\r\n                        <Row>\r\n                            <Form style={{ margin: \"50px 30px\" }}>\r\n                                <FormGroup row>\r\n                                    <Col sm={6}>\r\n                                        <Input type=\"button\" value=\"Pay with Lightbox\" onClick={gotoLightBox} />\r\n                                    </Col>\r\n                                    <Col sm={6}>\r\n                                        <Input type=\"button\" value=\"Pay with Payment Page\" onClick={showPaymentPage} />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </Row>\r\n\r\n                    </Row> :\r\n\r\n                    <Row>\r\n                        <Col xs=\"6\" sm=\"3\" md=\"3\"><img className={\"shirtImg\"} src=\"https://react-shooping-cart.netlify.app/img/1.jpg?v=1\" />\r\n                            <div className={\"buy\"}>\r\n                                <p>120 $</p>\r\n                                <Input type=\"button\" className={\"btn\"} value=\"Buy Now\" onClick={(e) => { byNow(e, 1) }} /></div>\r\n                        </Col>\r\n                        <Col xs=\"6\" sm=\"3\" md=\"3\"><img className={\"shirtImg\"} src=\"https://react-shooping-cart.netlify.app/img/2.jpg?v=2\" />\r\n                            <div className={\"buy\"}>\r\n                                <p>120 $</p>\r\n                                <Input type=\"button\" className={\"btn\"} value=\"Buy Now\" onClick={(e) => { byNow(e, 2) }} /></div></Col>\r\n                        <Col xs=\"6\" sm=\"3\" md=\"3\"><img className={\"shirtImg\"} src=\"https://react-shooping-cart.netlify.app/img/3.jpg?v=3\" />\r\n                            <div className={\"buy\"}>\r\n                                <p>120 $</p>\r\n                                <Input type=\"button\" className={\"btn\"} value=\"Buy Now\" onClick={(e) => { byNow(e, 3) }} />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n            </Container>\r\n        </header>\r\n    </div>\r\n}\r\nexport default Home;\r\n","\r\nimport React from 'react';\r\nimport { Container, Row, Col, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport axios from 'axios'\r\nconst queryString = require('query-string');\r\nclass Receipt extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            status: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n\r\n        const { session } = window;\r\n        const params = queryString.parse(window.location.search);\r\n        if (session) {\r\n            if (params.resultIndicator === session.successIndicator) this.setState({ status: \"success\" });\r\n\r\n\r\n            /* axios.post('https://ap-gateway.mastercard.com/api/rest/version/57/merchant/TESTMETLIFENI01/order/232E32393dd2', {\r\n            },\r\n                {\r\n                    headers: {\r\n                        \"Authorization\": \"Basic bWVyY2hhbnQuVEVTVE1FVExJRkVOSTAxOjRiM2Q5MjE1NDVlM2EyZThjOTMwYWI5MzczNDhhY2Yw\",\r\n                        \"Content-Type\": \"application/json\",\r\n                    }\r\n                })\r\n                .then((response) => {\r\n                    this.setState({ \"response\": response.data });\r\n                })\r\n                .catch(function (error) {\r\n                    this.setState({ \"response\": \"\" });\r\n                }); */\r\n        }\r\n\r\n    }\r\n    showReciept = (res) => {\r\n        /*  let transaction = res.transaction[0];\r\n         return <>\r\n             <h2>Order NO : {res.id}</h2>\r\n \r\n             <div>amount : {res.amount}</div>\r\n             <div>creationTime : {res.creationTime}</div>\r\n             <div>currency : {res.currency}</div>\r\n             <div>amount : {res.amount}</div>\r\n             <div>device : {res.device.ipAddress}</div>\r\n             <div>transaction status : {transaction.order.status}</div>\r\n             <div>sourceOfFunds : {transaction.sourceOfFunds.provided.card.fundingMethod}</div>\r\n             <div>gatewayCode : {transaction.response.gatewayCode}</div>\r\n         </> */\r\n    }\r\n    render() {\r\n        return <header className=\"App-header\">\r\n            <Container> {/* {\r\n                this.state.status === \"success\" ? <h1 className={\"centerAlign\"}>Sample Success Receipt Page</h1> : <h1 className={\"centerAlign\"}>Sample Receipt Page</h1>\r\n            } */}\r\n                {this.state.response ? this.showReciept(this.state.response) : \"\"}\r\n            </Container></header>\r\n    }\r\n\r\n}\r\nexport default Receipt;\r\n","import React from 'react';\nimport './App.css';\nimport Home from \"./Home\"\nimport Receipt from \"./receipt\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/receipt\">\n          <Receipt />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}