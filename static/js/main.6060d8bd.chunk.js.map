{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","window","Checkout","fectchSessionInfo","configureCheckout","useState","session","setSession","itemIndex","setitemIndex","byNow","e","index","a","preventDefault","data","className","Container","Row","Col","result","xs","sm","md","src","Form","FormGroup","row","Label","for","style","margin","Input","type","value","onClick","id","name","address","line1","line2","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6060d8bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Container, Row, Col, Form, FormGroup, Input, Label } from 'reactstrap';\n\nfunction App() {\n  let { Checkout } = window;\n  let { fectchSessionInfo, configureCheckout } = window;\n  let [session, setSession] = useState('');\n  let [itemIndex, setitemIndex] = useState('');\n  const gotoLightBox = () => {\n\n    configureCheckout(session.session.id, {\n      name: 'Some merchant name',\n      address: {\n        line1: '200 Sample St',\n        line2: '1234 Example Town'\n      }\n    }, \"lightBox\")\n\n  }\n  const showPaymentPage = () => {\n    configureCheckout(session.session.id, {\n      name: 'Some merchant name',\n      address: {\n        line1: '200 Sample St',\n        line2: '1234 Example Town'\n      }\n    }, \"\")\n  }\n  const byNow = async (e, index) => {\n    e.preventDefault();\n\n    session = await fectchSessionInfo();\n    setSession(session.data);\n\n    setitemIndex(index)\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Container>\n          <Row><Col><p className=\"checkout\" >Store</p></Col></Row>\n          {session.result === \"SUCCESS\" ?\n\n            <Row>\n              <Col xs=\"3\" sm=\"3\" md=\"3\">\n                {itemIndex ? <img className={\"shirtImg\"} src={`https://react-shooping-cart.netlify.app/img/${itemIndex}.jpg?v=1`} /> : \"\"}\n              </Col>\n              <Col xs=\"6\" sm=\"6\" md=\"6\" className=\"billingForm\">\n                <Form><h2>Billing Information</h2>\n                  <FormGroup row>\n                    <Label for=\"exampleEmail\" sm={4}>Amount</Label>\n                    <Col sm={8}>\n                      <b >120 $</b>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Label for=\"exampleEmail\" sm={4}>Description</Label>\n                    <Col sm={8}>\n                      <b >Ordered goods</b>\n                    </Col>\n                  </FormGroup>\n\n\n                  {/* <FormGroup row>\n                    <Label for=\"exampleEmail\" sm={4}>Name</Label>\n                    <Col sm={8}>\n                      <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Enter Name\" />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Label for=\"exampleAddress\" sm={4}>Address</Label>\n                    <Col sm={8}>\n                      <Input type=\"textarea\" name=\"address\" id=\"exampleAddress\" placeholder=\"Address placeholder\" />\n                    </Col>\n                  </FormGroup> */}\n\n\n                </Form>\n\n              </Col>\n              <Row>\n                <Form style={{ margin: \"50px 30px\" }}>\n                  <FormGroup row>\n                    <Col sm={6}>\n                      <Input type=\"button\" value=\"Pay with Lightbox\" onClick={gotoLightBox} />\n                    </Col>\n                    <Col sm={6}>\n                      <Input type=\"button\" value=\"Pay with Payment Page\" onClick={showPaymentPage} />\n                    </Col>\n                  </FormGroup>\n                </Form>\n              </Row>\n\n            </Row> :\n\n            <Row>\n              <Col xs=\"6\" sm=\"3\" md=\"3\"><img className={\"shirtImg\"} src=\"https://react-shooping-cart.netlify.app/img/1.jpg?v=1\" />\n                <div className={\"buy\"}>\n                  <p>120 $</p>\n                  <Input type=\"button\" className={\"btn\"} value=\"Buy Now\" onClick={(e) => { byNow(e, 1) }} /></div>\n              </Col>\n              <Col xs=\"6\" sm=\"3\" md=\"3\"><img className={\"shirtImg\"} src=\"https://react-shooping-cart.netlify.app/img/2.jpg?v=2\" />\n                <div className={\"buy\"}>\n                  <p>120 $</p>\n                  <Input type=\"button\" className={\"btn\"} value=\"Buy Now\" onClick={(e) => { byNow(e, 2) }} /></div></Col>\n              <Col xs=\"6\" sm=\"3\" md=\"3\"><img className={\"shirtImg\"} src=\"https://react-shooping-cart.netlify.app/img/3.jpg?v=3\" />\n                <div className={\"buy\"}>\n                  <p>120 $</p>\n                  <Input type=\"button\" className={\"btn\"} value=\"Buy Now\" onClick={(e) => { byNow(e, 3) }} />\n                </div>\n              </Col>\n            </Row>\n          }\n\n          {/* <div className=\"\" style={{ textAlign: \"center\" }}>\n          <div className=\"row\">\n          <div className={\"col-md-6\"}></div>\n          </div>\n          <input type=\"button\" className={\"btn\"} value=\"Pay with Lightbox\" onClick={gotoLightBox} />\n          <input type=\"button\" className={\"btn\"} value=\"Pay with Payment Page\" onClick={showPaymentPage} />\n        </div> */}\n        </Container>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}